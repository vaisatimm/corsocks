7.3 - Analyzing container behavior with Falco

You can use Falco as command line tool, like a web server, many ways.
We are going to use it as command line tool. 

The command that we use is "falco" command. 

Use -r FILE to supply a custom rules file. 

Falco is constantly checking what is happening in the kernel and applying our rules. 

To use Falco rule for a number of seconds: 

$ falco -r rules.yml -M 45

-M is expressed in seconds

Falco rules is a set of condition that will trigger our alerts in the cluster. 
We can define falco rules using yaml files. 

- rule: spawned_process_in_test_container
  desc: A process was spawned in the test container.
  condition: container.name = "falco-test" and evt.type = execve
  output: "%evt.time,%user.uid,%proc.name,%container.id,%container.name"
  priority: WARNING

The condition says that if an hacker open a shell inside a pod trying to run a command. 
The output section says the format of the alert, time, user, process, container id, container name. 
We we will the this in a log. 
%fields - % reference to a data field. Falco has serveral data fields that you can check with "falco --list"

Let's install falco on the nodes where the pods will run: so on the workers. 

https://falco.org/docs/getting-started/falco-linux-quickstart/

curl -fsSL https://falco.org/repo/falcosecurity-packages.asc | \
sudo gpg --dearmor -o /usr/share/keyrings/falco-archive-keyring.gpg
sudo bash -c 'cat << EOF > /etc/apt/sources.list.d/falcosecurity.list
deb [signed-by=/usr/share/keyrings/falco-archive-keyring.gpg] https://download.falco.org/packages/deb stable main
EOF'
sudo apt-get update -y
sudo apt-get install -y dkms make linux-headers-$(uname -r) dialog
sudo apt-get install -y falco

IN THE WIZARD SELECT EPBF
Troubleshooting: 
lsmod | grep falco
sudo modprobe falco
sudo apt-get install -y linux-headers-$(uname -r)
sudo apt-get remove --purge -y falco
sudo apt-get autoremove -y
sudo apt-get update
vim /etc/apt/sources.list.d/falcosecurity.list
sudo apt-get update
sudo apt-get install -y falco
IN THE WIZARD SELECT EPBF, the second one
systemctl status falco-bpf.service

Let's test Falco with a pod test: 

apiVersion: v1
kind: Pod
metadata:
  name: falco-test-pod
spec:
  nodeName: k8s-worker1
  containers:
    - name: falco-test
      image: busybox:1.33.1
      command: ['sh', '-c', 'while true; do cat /etc/shadow; sleep 5; done']


Let's take note of the container name: falco-test
Since in the command inside the container we are trying to read the /etc/shadow file it means something suspicious in real production environment


Let's create a falco rule on the worker node: 

[root@host cks]# vim falco-rule-to-create-on-worker.yaml

- rule: spawned_process_in_test_container
  desc: A process was spawned in the test container.
  condition: container.name = "falco-test" and evt.type = execve
  output: "%evt.time,%user.uid,%proc.name,%container.id,%container.name"
  priority: WARNING

So in the condition we are saying that every time an attacker tries send commands from inside the "falco-test" container (container.name), then we will print 
an alert in the format: output: "%evt.time,%user.uid,%proc.name,%container.id,%container.name"

[root@worker-1 ~]# falco -r falco-rule-to-create-on-worker.yaml -M 45

root@vmi1537862:~# falco -r falco-rule.yaml -M 45
Wed Feb 14 01:17:42 2024: Falco version: 0.37.1 (x86_64)
Wed Feb 14 01:17:42 2024: Falco initialized with configuration file: /etc/falco/falco.yaml
Wed Feb 14 01:17:42 2024: System info: Linux version 5.4.0-105-generic (buildd@lcy02-amd64-066) (gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04)) #119-Ubuntu SMP Mon Mar 7 18:49:24 UTC 2022
Wed Feb 14 01:17:42 2024: Loading rules from file falco-rule.yaml
Wed Feb 14 01:17:42 2024: The chosen syscall buffer dimension is: 8388608 bytes (8 MBs)
Wed Feb 14 01:17:42 2024: Starting health webserver with threadiness 4, listening on 0.0.0.0:8765
Wed Feb 14 01:17:42 2024: Loaded event sources: syscall
Wed Feb 14 01:17:42 2024: Enabled event sources: syscall
Wed Feb 14 01:17:42 2024: Opening 'syscall' source with BPF probe. BPF probe path: /root/.falco/falco-bpf.o
01:17:52.275124528: Warning 01:17:52.275124528,0,sh,b196ea016100,falco-test
01:17:52.275339206: Warning 01:17:52.275339206,0,cat,b196ea016100,falco-test
01:17:52.276178534: Warning 01:17:52.276178534,0,sh,b196ea016100,falco-test
01:17:52.276463713: Warning 01:17:52.276463713,0,sleep,b196ea016100,falco-test
01:17:57.277244002: Warning 01:17:57.277244002,0,sh,b196ea016100,falco-test
01:17:57.277467736: Warning 01:17:57.277467736,0,cat,b196ea016100,falco-test
01:17:57.278294636: Warning 01:17:57.278294636,0,sh,b196ea016100,falco-test
01:17:57.278448745: Warning 01:17:57.278448745,0,sleep,b196ea016100,falco-test
01:18:02.279176521: Warning 01:18:02.279176521,0,sh,b196ea016100,falco-test
01:18:02.279384714: Warning 01:18:02.279384714,0,cat,b196ea016100,falco-test
01:18:02.280476580: Warning 01:18:02.280476580,0,sh,b196ea016100,falco-test
01:18:02.280643044: Warning 01:18:02.280643044,0,sleep,b196ea016100,falco-test
01:18:07.281328458: Warning 01:18:07.281328458,0,sh,b196ea016100,falco-test
01:18:07.281565363: Warning 01:18:07.281565363,0,cat,b196ea016100,falco-test
01:18:07.282205888: Warning 01:18:07.282205888,0,sh,b196ea016100,falco-test
01:18:07.282366948: Warning 01:18:07.282366948,0,sleep,b196ea016100,falco-test
01:18:12.283128891: Warning 01:18:12.283128891,0,sh,b196ea016100,falco-test
01:18:12.283322180: Warning 01:18:12.283322180,0,cat,b196ea016100,falco-test
01:18:12.283910148: Warning 01:18:12.283910148,0,sh,b196ea016100,falco-test
01:18:12.284160592: Warning 01:18:12.284160592,0,sleep,b196ea016100,falco-test
01:18:17.285008342: Warning 01:18:17.285008342,0,sh,b196ea016100,falco-test


[root@worker-1 ~]# falco --list


To show all the different things that falco can reference. 

Field Class:                  evt (All event types)
Description:                  These fields can be used for all event types
Event Sources:                syscall

evt.num                       event number.
evt.time                      event timestamp as a time string that includes the nanosecond part.
evt.time.s                    event timestamp as a time string with no nanoseconds.
evt.time.iso8601              event timestamp in ISO 8601 format, including nanoseconds and time zone offset (in UTC).

[---] Output omitted. 

